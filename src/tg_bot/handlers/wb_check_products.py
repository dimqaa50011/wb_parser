from aiogram import F, Router
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from src.services import ProductService
from src.tg_bot.keyboards.wb_keyboard.check_product import markup
from src.tg_bot.keyboards.wb_keyboard.callbacdata import WBCallbackdata
from ..state import CheckProductState

router = Router()


@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá", reply_markup=markup
    )


@router.callback_query(WBCallbackdata.filter())
async def get_articul(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(CheckProductState.wait_articul)
    await call.message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞–∫—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")


@router.message(CheckProductState.wait_articul)
async def get_product_info(
    message: Message, state: FSMContext, service: ProductService
):
    articul = message.text.strip()
    if not articul.isdigit():
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å–æ—Ç—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
        return
    product = await service.get_product(int(articul))
    if not product:
        await message.answer("–¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    msg = "\n".join(
        (
            f"–ê—Ä—Ç–∏–∫—É–ª: {product.articul}",
            f"–¶–µ–Ω–∞: {product.price}",
            f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {product.sale_price}",
            f"–†–µ–π—Ç–∏–Ω–≥: {product.rating}",
            f"–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö: {product.quantity_sum}",
        )
    )
    await state.clear()
    await message.answer(msg)
